<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用hexo搭建一个属于自己的博客并部署到Github和Coding</title>
      <link href="2021/02/27/hexo-da-jian-bo-ke/"/>
      <url>2021/02/27/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo搭建一个属于自己的博客并部署到Github和Coding"><a href="#使用hexo搭建一个属于自己的博客并部署到Github和Coding" class="headerlink" title="使用hexo搭建一个属于自己的博客并部署到Github和Coding"></a>使用hexo搭建一个属于自己的博客并部署到Github和Coding</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git</p><p>电脑系统为window 10专业版，64位</p><h2 id="1-搭建基本环境"><a href="#1-搭建基本环境" class="headerlink" title="1.搭建基本环境"></a>1.搭建基本环境</h2><h3 id="1-1安装Git"><a href="#1-1安装Git" class="headerlink" title="1.1安装Git"></a>1.1安装Git</h3><p>到git官网上<a href="https://gitforwindows.org/">下载</a>,Download Git<br>然后一路点下一步，进行默认配置的安装</p><h3 id="1-2安装Node-js"><a href="#1-2安装Node-js" class="headerlink" title="1.2安装Node.js"></a>1.2安装Node.js</h3><p>Node.js<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">官网</a>同理下载，进行默认配置的安装。<br>安装完成后,检查安装是否正确，Win➕r输入cmd并打开，依次输入 node -v、npm -v 和 git –version 并回车，出现程序版本号即可。</p><h2 id="2-本地搭建Hexo博客"><a href="#2-本地搭建Hexo博客" class="headerlink" title="2.本地搭建Hexo博客"></a>2.本地搭建Hexo博客</h2><p>本地新建一个文件夹用来存放你的Hexo程序和你的博客文件，这里我以我的文件夹Blog为例。打开次文件夹，右键&gt;选择Git Bash Here，然后进行接下来的操作</p><h3 id="2-1安装Hexo"><a href="#2-1安装Hexo" class="headerlink" title="2.1安装Hexo"></a>2.1安装Hexo</h3><p>在Git命令行下输入以下内容</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>耐心等待安装完成，安装过程可能有点慢，安装完成提示如下图</p><img src="/medias/loading.gif" data-original="https://liblog-1305080594.cos.ap-nanjing.myqcloud.com/jiaocheng1.png"><h3 id="2-2初始化Hexo"><a href="#2-2初始化Hexo" class="headerlink" title="2.2初始化Hexo"></a>2.2初始化Hexo</h3><p>安装完成后进行初始化Hexo,依次输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">hexo init      # 初始化npm install    # 安装组件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功后文件夹截图如下：</p><img src="/medias/loading.gif" data-original="https://liblog-1305080594.cos.ap-nanjing.myqcloud.com/jiaocheng2.png"><h3 id="2-3Hexo本地预览"><a href="#2-3Hexo本地预览" class="headerlink" title="2.3Hexo本地预览"></a>2.3Hexo本地预览</h3><p>完成上一步后进行初步本地预览，以此输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">hexo g   # 生成页面hexo s   # 启动预览<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功后在浏览器输入<br><a href="http://localhost:4000/">http://localhost:4000</a><br>出现以下Hexo默认界面表示本地博客安装成功了</p><img src="/medias/loading.gif" data-original="https://liblog-1305080594.cos.ap-nanjing.myqcloud.com/jiaocheng3.png"><p>恭喜你迈出了第一步这很关键！</p><p>如果加载不出来提示端口被占用，Control+c关闭窗口重新打开后，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p><h2 id="3-将博客部署到Github和Coding-可选"><a href="#3-将博客部署到Github和Coding-可选" class="headerlink" title="3.将博客部署到Github和Coding(可选)"></a>3.将博客部署到Github和Coding(可选)</h2><h3 id="3-1注册账号"><a href="#3-1注册账号" class="headerlink" title="3.1注册账号"></a>3.1注册账号</h3><p>1.使用邮箱注册 <a href="https://github.com/">GitHub</a> 账户，选择免费账户，并完成邮件验证。</p><p>2.（可选）进入Coding<a href="https://coding.net/">官网</a>并注册一个团队和一个账户。</p><h3 id="3-2创建Github仓库"><a href="#3-2创建Github仓库" class="headerlink" title="3.2创建Github仓库"></a>3.2创建Github仓库</h3><p>GitHub 主页右上角加号 -&gt; New repository：</p><p>Repository name 中输入 <code>用户名.github.io</code>（这里仓库名字一定要和你的用户名相同 切记切记）</p><p>勾选 “Initialize this repository with a README”</p><p>后点击 Create repository 进行创建。</p><p>创建后你的博客地址为：<code>https://用户名.github.io</code>但是此时还没有内容，所以访问是404界面</p><h3 id="3-3创建Coding项目"><a href="#3-3创建Coding项目" class="headerlink" title="3.3创建Coding项目"></a>3.3创建Coding项目</h3><p>点击新建项目&gt; 选择代码托管项目</p><img src="/medias/loading.gif" data-original="https://liblog-1305080594.cos.ap-nanjing.myqcloud.com/jiaocheng4.png"><p>填写项目名称 项目表示会自动生成 &gt;点击完成创建</p><p>进入项目后左面列表&gt;代码仓库&gt;新建仓库</p><p>填写如下</p><img src="/medias/loading.gif" data-original="https://liblog-1305080594.cos.ap-nanjing.myqcloud.com/jiaocheng5.png"><p>此处为了方便我也填写了和Github相同的名称 &gt;完成创建。</p><h3 id="3-4部署-Hexo-到-GitHub-和-Coding"><a href="#3-4部署-Hexo-到-GitHub-和-Coding" class="headerlink" title="3.4部署 Hexo 到 GitHub 和 Coding"></a>3.4部署 Hexo 到 GitHub 和 Coding</h3><p>首先要选择连接方式  这里我推荐ssh秘钥链接  并以此为例进行演示</p><p><strong>生成秘钥</strong></p><p>在桌面右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "GitHub 用户名"git config --global user.email "GitHub 邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>创建 SSH 秘钥</strong>：</p><p>输入 <code>ssh-keygen -t rsa -C "GitHub 邮箱"</code>，然后一路回车。（应该是三次回车 记不太得了）</p><p><strong>添加秘钥：</strong></p><p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的秘钥内容到 Key 中，点击 Add SSH key 完成添加。</p><img src="/medias/loading.gif" data-original="https://liblog-1305080594.cos.ap-nanjing.myqcloud.com/jiaocheng6.png"><p><strong>验证连接：</strong></p><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><p><strong>Coding添加方式</strong></p><p>同理刚才生成的ssh也可用于coding的连接</p><p>代码仓库&gt;设置&gt;部署公钥&gt;新建部署公钥</p><img src="/medias/loading.gif" data-original="https://liblog-1305080594.cos.ap-nanjing.myqcloud.com/jiaocheng7.png"><p>建议勾选永久有效</p><p><strong>验证coding连接</strong></p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@git.coding.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上输入yes回车确认</p><p><strong>Git部署插件</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改配置文件</strong></p><p>进入Blog根目录 打开_config.yml文件 拉到最下面修改部署配置</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: git  repo:  github: git@github.com:你的用户名/你的用户名.github.io.git,master  coding: git@e.coding.net:用户名/项目名称/项目名称.git,master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果coding地址不确定可以去代码仓库设置界面进行复制</p><p>保存后终端执行</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>开启 Coding Pages</strong></p><p>新版的coding需要手动开启静态托管</p><p>进入项目&gt;持续部署&gt;网站托管   这里需要实名认证</p><p>实名认证之后右上  新建网站&gt;静态网站 填写网站名称 节点选择香港可以不用备案</p><p>等待部署成功后就可以进行访问了 点击部署上方箭头可以查看部署的博客网址自己进行绑定域名操作</p><h3 id="3-4进行访问"><a href="#3-4进行访问" class="headerlink" title="3.4进行访问"></a>3.4进行访问</h3><p>这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code></p><p>和coding分配的域名 就可以看到 Hexo 网站了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="2021/02/27/di-yi-pian-wen-zhang/"/>
      <url>2021/02/27/di-yi-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-代码高亮"><a href="#1-代码高亮" class="headerlink" title="1.代码高亮"></a>1.代码高亮</h2><p>#代码高亮在代码前加```</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Tag标签外挂使用方法"><a href="#2-Tag标签外挂使用方法" class="headerlink" title="2.Tag标签外挂使用方法"></a>2.Tag标签外挂使用方法</h2><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 紅色</div><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 綠色</div><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i> 黃色</div><h2 id="3-emojy表情"><a href="#3-emojy表情" class="headerlink" title="3.emojy表情"></a>3.emojy表情</h2><pre class="line-numbers language-none"><code class="language-none">:smile:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><span class="github-emoji"><span>😄</span><img src="/medias/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="/medias/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="/medias/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="直达评论按钮"><a href="#直达评论按钮" class="headerlink" title="直达评论按钮"></a>直达评论按钮</h2><h3 id="1-新建文件themes-Matery-layout-partial-back-comment-ejs-粘贴如下代码"><a href="#1-新建文件themes-Matery-layout-partial-back-comment-ejs-粘贴如下代码" class="headerlink" title="1.新建文件themes\Matery\layout\_partial\back-comment.ejs,粘贴如下代码"></a>1.新建文件<code>themes\Matery\layout\_partial\back-comment.ejs</code>,粘贴如下代码</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 直达评论 --&gt;&lt;div id="to_comment" class="comment-scroll"&gt;    &lt;a class="btn-floating btn-large waves-effect waves-light" href="#vcomments" title="直达评论"&gt;        &lt;i class="fas fa-comments"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我这里评论是valine，直接填写的valine的id——<code>href="#vcomments"</code>,如果是其他评论，对应修改即可</p><h3 id="2-在themes-Matery-layout-partial-valine-ejs文末添加一条，引用第一步的内容；"><a href="#2-在themes-Matery-layout-partial-valine-ejs文末添加一条，引用第一步的内容；" class="headerlink" title="2.在themes\Matery\layout\_partial\valine.ejs文末添加一条，引用第一步的内容；"></a>2.在<code>themes\Matery\layout\_partial\valine.ejs</code>文末添加一条，引用第一步的内容；</h3><pre class="line-numbers language-none"><code class="language-none">&lt;%- partial('_partial/back-comment.ejs') %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-增加样式在themes-Matery-source-css-matery-css添加内容如下："><a href="#3-增加样式在themes-Matery-source-css-matery-css添加内容如下：" class="headerlink" title="3.增加样式在themes\Matery\source\css\matery.css添加内容如下："></a>3.增加样式在<code>themes\Matery\source\css\matery.css</code>添加内容如下：</h3><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
